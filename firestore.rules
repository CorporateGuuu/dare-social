rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isMutual(uid1, uid2) {
      return exists(/databases/$(database)/documents/users/$(uid1)/following/$(uid2))
          && exists(/databases/$(database)/documents/users/$(uid2)/following/$(uid1));
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
      match /notifications/{notificationId} {
        allow read: if request.auth.uid == userId;
        allow write: if request.auth.uid == userId || request.auth.token.role == 'server';
      }
      match /transactions/{transactionId} {
        allow read: if request.auth.uid == userId;
        allow write: if false; // Only via Cloud Functions
      }
      match /earnings/{earningId} {
        allow read: if request.auth.uid == userId;
        allow write: if false; // Only via Cloud Functions
      }
      match /referral_events/{eventId} {
        allow read: if request.auth.uid == userId;
        allow write: if false; // Only via Cloud Functions
      }
      match /achievement_events/{eventId} {
        allow read: if request.auth.uid == userId;
        allow write: if false; // Only via Cloud Functions
      }
    }
    match /dares/{dareId} {
      // Create dares - user must be authenticated
      allow create: if request.auth.uid != null;

      // Update rules - different for group vs 1v1 dares
      allow update: if request.auth.uid == resource.data.creator_id ||
                        (exists(resource.data.participants) &&
                         request.auth.uid in resource.data.participants.map(p => p.user_id)) ||
                        (request.auth.uid == resource.data.challenger_id && request.resource.data.status == "declined") ||
                        (request.auth.uid == resource.data.opponent_id && request.resource.data.status in ["active", "declined"]) ||
                        request.auth.token.role == 'server';

      // Read rules - participants can see their dares, creators can see their created dares
      allow read: if request.auth.uid == resource.data.creator_id ||
                     (exists(resource.data.participants) &&
                      request.auth.uid in resource.data.participants.map(p => p.user_id)) ||
                     request.auth.uid == resource.data.challenger_id ||
                     request.auth.uid == resource.data.opponent_id ||
                     request.auth.uid != null; // Allow public reads for open dares

      // Proofs subcollection
      match /proofs/{proofId} {
        allow read: if request.auth.uid != null;
        allow write: if request.auth.uid == resource.data.creator_id ||
                        (exists(resource.data.participants) &&
                         request.auth.uid in resource.data.participants.map(p => p.user_id));
      }
    }
    match /posts/{postId} {
      allow read, write: if request.auth.uid != null;
      match /likes/{userId} {
        allow read, write: if request.auth.uid == userId || request.auth.uid != null;
      }
      match /comments/{commentId} {
        allow read, write: if request.auth.uid != null;
      }
      match /shares/{userId} {
        allow read, write: if request.auth.uid == userId || request.auth.uid != null;
      }
    }
    match /activities/{activityId} {
      allow read, write: if request.auth.uid != null;
    }
    match /bets/{betId} {
      allow read, write: if request.auth.uid != null;
    }
    match /rewards/{rewardId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow write: if false; // Only via Cloud Functions
    }
    match /sponsors/{sponsorId} {
      allow read: if true;
      allow write: if request.auth.uid != null; // Admin only
    }
    match /leaderboards/{leaderboardId} {
      allow read: if true;
      allow write: if false; // Only via Cloud Functions
    }
    match /referral_codes/{code} {
      allow read: if request.auth.uid != null;
      allow write: if false; // Only via Cloud Functions
    }
    match /users/{userId} {
      match /following/{targetId} {
        allow read: if request.auth.uid == userId || request.auth.uid == targetId;
        allow write: if request.auth.uid == userId || request.auth.token.role == 'server';
      }
      match /followers/{followerId} {
        allow read: if request.auth.uid == userId || request.auth.uid == followerId;
        allow write: if request.auth.uid == followerId || request.auth.token.role == 'server';
      }
    }
    match /friend_stats/{pairId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid in [resource.data.userA, resource.data.userB];
    }
  }
}
